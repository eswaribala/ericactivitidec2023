package com.cts.sbactivitiapp.controllers;

import org.activiti.engine.RuntimeService;
import org.activiti.engine.TaskService;
import org.activiti.engine.task.Task;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import com.cts.sbactivitiapp.dtos.AppResponse;
import com.cts.sbactivitiapp.dtos.TaskCompletionRequest;

import java.util.List;

@RestController
public class BankController {
    @Autowired
    private RuntimeService runTimeService;

    @Autowired
    private TaskService taskService; 


    @Autowired
    UserRegistrationService userRegistrationService
    
    @GetMapping(value="/start", produces= MediaType.APPLICATION_JSON_VALUE)
    public String startTestProcess()
    {
        runTimeService.startProcessInstanceByKey("Process_4johXDB3P");
        List<Task> tasks = taskService.createTaskQuery().orderByTaskCreateTime().asc().list();


        return "We are running now"+runTimeService.createProcessInstanceQuery().count()+"Process instance";
    }
    
    @PostMapping(path = "/tasks/{taskId}",
            consumes = MediaType.APPLICATION_JSON_VALUE)
    public ResponseEntity<AppResponse> completeTask(@PathVariable String taskId, 
    		@RequestBody TaskCompletionRequest taskRequest){
    	AppResponse apiResponse = new AppResponse();
        try {
            Task task = userRegistrationService.completeTask(taskId, taskRequest);
            apiResponse.setData(task);
            apiResponse.setMessage("Task completed successfully");
            apiResponse.setStatus(HttpStatus.OK);
        } catch (UserRegistrationTaskException ex) {
            apiResponse.setMessage(ex.getMessage());
            apiResponse.setStatus(HttpStatus.BAD_REQUEST);
        }
        return ResponseEntity.ok(apiResponse);

    }
}
